# Process this file with autoconf to produce a configure script.
# $Id:  $
# $Source:  $


# ------- Initialisation -------

m4_define([WGANDALF_MAJOR], [0])
m4_define([WGANDALF_MINOR], [3])
m4_define([WGANDALF_REV], [0])
m4_define([WGANDALF_VERSION],
  m4_defn([WGANDALF_MAJOR]).m4_defn([WGANDALF_MINOR]).m4_defn([WGANDALF_REV]))

AC_INIT(wgandalf, [WGANDALF_VERSION])

AC_MSG_NOTICE([====== initialising ======])

# Add new configuration files

AC_CONFIG_SRCDIR(Db/dballoc.c)
AC_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE

#Initialize libtool
AC_PROG_LIBTOOL

# ------- Checking -------

AC_MSG_NOTICE([====== checking ======])

AC_PROG_CC
AM_PROG_CC_C_O # for per-target flags

#Checks for libraries.
ACX_PTHREAD()

#Check for programs
AC_PROG_INSTALL

#Check for Python (optional)
AC_ARG_WITH([python],
    [AS_HELP_STRING([--with-python],
        [enable building Python bindings])],
    [],
    [with_python=no])

AS_IF([test "x$with_python" != xno],
    [AM_PATH_PYTHON(,,[])],
    [PYTHON=[]])
  
if test "x$PYTHON" != "x"
then
    AM_CHECK_PYTHON_HEADERS(,[PYTHON=[]])
fi

# If PYTHON is non-empty, contents of Python subdir will be
# included in the build. This also implies that the check for
# headers was successful and PYTHON_INCLUDES contains something useful.
AM_CONDITIONAL(PYTHON, [test "x$PYTHON" != "x"])

#Check for Raptor (optional)

AC_CHECK_PROGS(RAPTOR_CONFIG, raptor-config, [])
AM_CONDITIONAL(RAPTOR, [test "x$RAPTOR_CONFIG" != "x"])


# ----------- configuration options ----------

AC_MSG_NOTICE([====== setting configuration options ======])

AC_MSG_CHECKING(for logging)
AC_ARG_ENABLE(logging, [AS_HELP_STRING([--enable-logging],
    [enable transaction logging])],
    [logging=$enable_logging],logging=no)
if test "$logging" != no
then
    AC_DEFINE([USE_DBLOG], [1], [Use dblog module for transaction logging])
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(disabled)
fi

AC_MSG_CHECKING(for queued locks)
AC_ARG_ENABLE(queued-locks, [AS_HELP_STRING([--enable-queued-locks],
    [enable lock queue])],
    [queued_locks=$enable_queued_locks],queued_locks=no)
if test "$queued_locks" != no
then
    AC_DEFINE([QUEUED_LOCKS], [1], [Use queued locks with local spinning])
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(disabled)
fi

AC_MSG_CHECKING(for additional validation checks)
AC_ARG_ENABLE(checking, [AS_HELP_STRING([--disable-checking],
    [disable additional validation checks in API layer (small performance gain) ])],
    [checking=$enable_checking],checking=yes)
if test "$checking" != no
then
    AC_DEFINE([CHECK], [1], [Use additional validation checks])
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(disabled)
fi

AC_MSG_CHECKING(for dummy locks)
AC_ARG_ENABLE(dummy-locks, [AS_HELP_STRING([--enable-dummy-locks],
    [allow compiling on platforms that do not have atomic
        operations needed for locking])],
    [dummy_locks=$enable_dummy_locks],dummy_locks=no)
if test "$dummy_locks" != no
then
    AC_DEFINE([DUMMY_LOCKS], [1],
        [Allow compiling on platforms that do not have atomic
            operations needed for locking])
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(disabled)
fi

# ---------- Compiler flags --------

AC_MSG_NOTICE([====== setting compiler flags ======])

#CFLAGS="-g -Wall"

CFLAGS="-O3 -Wall"


AC_MSG_CHECKING(for gprof)
AC_ARG_ENABLE(gprof, [AS_HELP_STRING([--enable-gprof],
    [enable memory profiling with gprof])],
    gprof=yes,gprof=no)
if test "$gprof" != no
then
    CFLAGS="-pg $CFLAGS"
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(no)
fi


# ---------- Final creation --------

AC_MSG_NOTICE([====== final steps ======])

AC_DEFINE([VERSION_MAJOR], [WGANDALF_MAJOR], [Package major version])
AC_DEFINE([VERSION_MINOR], [WGANDALF_MINOR], [Package minor version])
AC_DEFINE([VERSION_REV], [WGANDALF_REV], [Package revision number])

AC_OUTPUT([
Makefile
Main/Makefile
Examples/Makefile
Python/Makefile
])
