Wgandalf python bindings
========================


I. About this document

Part II describes the compilation, installation and general usage
of Wgandalf Python bindings.

Part III describes the immediate low level API provided by the
wgdb.so (wgdb.pyd) module. This API (in most cases) directly wraps
functions provided by libwgdb.

Part IV describes the high level API, which is designed for convinience
of usage and is not speed-optimized at the moment (start here if you
just want to know how to put stuff into the database using Python).


II. Compilation and Installation

1. Compiling Python bindings

Python module is not compiled by default. ./configure --with-python
enables the compilation (provided that the configure script is
able to locate the Python.h file in the system. If not, it is
assumed that Python is not properly installed and wgandalf will be
compiled without Python bindings).

When building manually, use the separate scripts in Python directory.
Check that the Python path in compile.sh (compile.bat for Windows)
matches your system.

2. Installation

The high level WGandalf.py module expects to find the compiled wgdb.so
module in the same directory it resides in. To install the modules,
they can be copied to Python site-packages directory manually.


III. wgdb.so (wgdb.pyd) module

1. Attaching and deleting a database

FUNCTIONS
    attach_database(shmname='', size=0)
        Connect to a shared memory database. If the database with the
        given name does not exist, it is created.
    
    delete_database(shmname)
        Delete a shared memory database.

attach_database() allows keyword arguments. If either database name
or size are omitted, default values are used. Note that the shared memory
name is expected to be converted by strtol().

Examples:

>>> a=wgdb.attach_database()
>>> b=wgdb.attach_database("1001")
>>> c=wgdb.attach_database(size=30000)
>>> d=wgdb.attach_database(size=0, shmname="9999")

delete_database() takes a single argument. If this is omitted, the
default value will be used.

>>> wgdb.delete_database("1001")
>>> wgdb.delete_database()


2. Exception handling.

wgdb module defines a wgdb.error exception object that can be used in
error handling:

>>> try:
...  a=wgdb.attach_database()
... except wgdb.error, msg:
...  print 'wgdb error'
... except:
...  print 'other error'
... 


3. Creating and manipulating records

FUNCTIONS
    create_record(db, length)
        Create a record with given length.
    
    get_first_record(db)
        Fetch first record from database.
    
    get_next_record(db, rec)
        Fetch next record from database.
    
    get_record_len(db, rec)
        Get record length (number of fields).

    is_record(rec)
        Determine if object is a WGandalf record.
    
db is an object returned by wgdb.attach_database(). rec is an object returned
by get_first_record() or other similar functions that return a record.

Examples:

>>> d=wgdb.attach_database()
...
>>> a=wgdb.create_record(d,5)
>>> a
<WGandalf db record at b6908df8>
>>> b=wgdb.create_record(d,3)
>>> b
<WGandalf db record at b6908e10>
>>> rec=wgdb.get_first_record(d)
>>> wgdb.get_record_len(d,rec)
5
>>> rec
<WGandalf db record at b6908df8>
>>> rec=wgdb.get_next_record(d,rec)
>>> wgdb.get_record_len(d,rec)
3
>>> rec
<WGandalf db record at b6908e10>
>>> rec=wgdb.get_next_record(d,rec)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
wgdb.error: Failed to fetch a record.


4. Writing and reading field contents.

wgdb module handles data type conversion between Python and wgandalf. Field
contents will be converted to Python object when reading data and again encoded
into field data when writing to database.

Currently supported types include: None, int, float, string (regular 0-terminated
string. Raw binary data is not allowed), record.

Setting a field to None is equivalent to clearing the field data. Similarly,
unwritten fields will be returned to Python as containing None.

FUNCTIONS
    get_field(db, rec, fieldnr)
        Get field data decoded to corresponding Python type.
    
    set_field(db, rec, fieldnr, data)
        Set field value. Field type is determined automatically.

db is an object returned by wgdb.attach_database(). rec is an object returned
by get_first_record() or other similar functions that return a record.

Examples:

>>> d=wgdb.attach_database()
...
>>> tmp=wgdb.create_record(d,4)
>>> tmp
<WGandalf db record at b6996e00>
>>> print (wgdb.get_field(d,tmp,0),)
(None,)
>>> wgdb.set_field(d,tmp,0,0)
>>> wgdb.set_field(d,tmp,1,256)
>>> wgdb.set_field(d,tmp,2,78.3345)
>>> wgdb.set_field(d,tmp,3,"hello")
>>> print (wgdb.get_field(d,tmp,0),)
(0,)
>>> print (wgdb.get_field(d,tmp,1),)
(256,)
>>> print (wgdb.get_field(d,tmp,2),)
(78.334500000000006,)
>>> print (wgdb.get_field(d,tmp,3),)
('hello',)
>>> wgdb.set_field(d,tmp,3,None)
>>> print (wgdb.get_field(d,tmp,3),)
(None,)

Example with a field pointing to another record:

>>> tmp=wgdb.create_record(d,4)
>>> n=wgdb.create_record(d,4)
>>> wgdb.set_field(d,tmp,3,n)
>>> wgdb.set_field(d,n,0,1)
>>> uu=wgdb.get_field(d,tmp,3)
>>> uu
<WGandalf db record at b69b3e18>
>>> wgdb.get_field(d,uu,0)
1


IV. WGandalf.py module (high level API)

1. Overview

High level access to database is provided by WGandalf.py module. This
module requires the low level wgdb.so (wgdb.pyd on Windows) module.

CLASSES
    Connection
    Cursor
    Record
    
    class Connection
     |  The Connection class acts as a container for
     |  wgdb.Database and provides all connection-related
     |  and record accessing functions.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, shmname=None, shmsize=0)
     |  
     |  close(self)
     |      Close the connection.
     |  
     |  create_record(self, size)
     |      Create new record with given size.
     |  
     |  cursor(self)
     |      Return a DBI-style database cursor
     |  
     |  first_record(self)
     |      Get first record from database.
     |  
     |  get_field(self, rec, fieldnr)
     |      Return data field contents
     |  
     |  next_record(self, rec)
     |      Get next record from database.
     |  
     |  set_field(self, rec, fieldnr, data)
     |      Set data field contents
    
    class Cursor
     |  Pseudo-cursor object. Since there are no queries
     |  available, this allows fetching from the set of all records
     |  and inserting records.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, conn)
     |      # XXX: not clear if this object is even needed.
     |  
     |  close(self)
     |  
     |  fetchall(self)
     |      Fetch all (remaining) records from database
     |  
     |  fetchone(self)
     |      Fetch the next record from database
     |  
     |  insert(self, fields)
     |      Insert a record into database
    
    class Record
     |  Record data representation. Allows field-level and record-level
     |  manipulation of data.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, conn, rec)
     |  
     |  fetch(self)
     |      Return the contents of the record as tuple
     |  
     |  get__rec(self)
     |      Return low level record object
     |  
     |  get_field(self, fieldnr)
     |      Return data field contents
     |  
     |  get_size(self)
     |      Return record size
     |  
     |  set_field(self, fieldnr, data)
     |      Set data field contents
     |  
     |  update(self, fields)
     |      Set the contents of the entire record

FUNCTIONS
    connect(shmname=None, shmsize=0)
        Attaches to (or creates) a database. Returns a database object

Examples:

Connecting to database with default parameters (see examples for
wgdb.attach_database() for possible arguments and their usage).

>>> import WGandalf
>>> d=WGandalf.connect()

Cursor methods. At first the record set will be emtpy, then we
insert one which is subsequently returned by fetchall().

>>> c=d.cursor()
>>> c.fetchall()
[]
>>> c.insert(("This", "is", "my", 1.0, "record"))
<WGandalf.Record instance at 0xb74a89ac>
>>> c.fetchall()
[('This', 'is', 'my', 1.0, 'record')]

Record methods. We create a new record, then attempt to modify
a single field and the full record. The last attempt will fail
because record size is fixed.

>>> new=c.insert(('My', 2, 'record'))
>>> new
<WGandalf.Record instance at 0xb74a8a8c>
>>> del c
>>> c=d.cursor()
>>> c.fetchall()
[('This', 'is', 'my', 1.0, 'record'), ('My', 2, 'record')]
>>> new.get_field(1)
2
>>> new.set_field(1, 2.0)
>>> new.fetch()
('My', 2.0, 'record')
>>> new.update(('this','will','not','fit'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "WGandalf.py", line 179, in update
    self.set_field(i, fields[i])
  File "WGandalf.py", line 164, in set_field
    raise Exception, "Field number out of bounds."
Exception: Field number out of bounds.
>>> new.fetch()
('this', 'will', 'not')

Connections can be closed, after which the cursors and records created
using that connection will no longer be usable.

>>> d.close()
>>> new.fetch()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "WGandalf.py", line 171, in fetch
    result.append(self.get_field(i))
  File "WGandalf.py", line 159, in get_field
    return self._conn.get_field(self, fieldnr)
  File "WGandalf.py", line 91, in get_field
    return wgdb.get_field(self._db, rec.get__rec(), fieldnr)
TypeError: argument 1 must be wgdb.Database, not None

2. Linked records

WGandalf record fields may contain references to other records. In high
level API, these records are represented as instances of WGandalf.Record
class. Note that it is not useful to create such instances directly. Instances
of Record class are always returned by WGandalf operations (creating new
records or retrieving existing ones).

Example of linking to other records:

>>> import WGandalf
>>> d=WGandalf.connect()
>>> c=d.cursor()
>>> rec=c.insert((1,2,3,4,5))
>>> c.fetchone()
(1, 2, 3, 4, 5)
>>> c.insert(('1st linked record', rec))
<WGandalf.Record instance at 0xb7543d0c>
>>> c.insert(('2nd linked record', rec))
<WGandalf.Record instance at 0xb7543d2c>
>>> l=c.fetchall()
>>> l
[('1st linked record', <WGandalf.Record instance at 0xb7543d4c>), ('2nd linked record', <WGandalf.Record instance at 0xb7543d6c>)]
>>> map(lambda x: x[1].fetch(), l)
[(1, 2, 3, 4, 5), (1, 2, 3, 4, 5)]
>>> rec.set_field(3, 99)
>>> map(lambda x: x[1].fetch(), l)
[(1, 2, 3, 99, 5), (1, 2, 3, 99, 5)]

