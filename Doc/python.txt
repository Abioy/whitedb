Wgandalf python bindings
========================


1. Compiling Python bindings

Python module is not compiled by default. ./configure --with-python
enables the compilation (provided that the configure script is
able to locate the Python.h file in the system. If not, it is
assumed that Python is not properly installed and wgandalf will be
compiled without Python bindings).

When building manually, use the separate scripts in Python directory.
Check that the Python path in compile.sh (compile.bat for Windows)
matches your system.


2. Attaching and deleting a database

FUNCTIONS
    attach_database(shmname='', size=0)
        Connect to a shared memory database. If the database with the
        given name does not exist, it is created.
    
    delete_database(shmname)
        Delete a shared memory database.

attach_database() allows keyword arguments. If either database name
or size are omitted, default values are used. Note that the shared memory
name is expected to be converted by strtol().

Examples:

>>> a=wgdb.attach_database()
>>> b=wgdb.attach_database("1001")
>>> c=wgdb.attach_database(size=30000)
>>> d=wgdb.attach_database(size=0, shmname="9999")

delete_database() takes a single argument. If this is omitted, the
default value will be used.

>>> wgdb.delete_database("1001")
>>> wgdb.delete_database()


3. Exception handling.

wgdb module defines a wgdb.error exception object that can be used in
error handling:

>>> try:
...  a=wgdb.attach_database()
... except wgdb.error, msg:
...  print 'wgdb error'
... except:
...  print 'other error'
... 


4. Creating and manipulating records

FUNCTIONS
    create_record(db, length)
        Create a record with given length.
    
    get_first_record(db)
        Fetch first record from database.
    
    get_next_record(db, rec)
        Fetch next record from database.
    
    get_record_len(db, rec)
        Get record length (number of fields).

db is an object returned by wgdb.attach_database(). rec is an object returned
by get_first_record() or other similar functions that return a record.

Examples:

>>> d=wgdb.attach_database()
...
>>> a=wgdb.create_record(d,5)
>>> a
<WGandalf db record at b6908df8>
>>> b=wgdb.create_record(d,3)
>>> b
<WGandalf db record at b6908e10>
>>> rec=wgdb.get_first_record(d)
>>> wgdb.get_record_len(d,rec)
5
>>> rec
<WGandalf db record at b6908df8>
>>> rec=wgdb.get_next_record(d,rec)
>>> wgdb.get_record_len(d,rec)
3
>>> rec
<WGandalf db record at b6908e10>
>>> rec=wgdb.get_next_record(d,rec)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
wgdb.error: Failed to fetch a record.


5. Writing and reading field contents.

wgdb module handles data type conversion between Python and wgandalf. Field
contents will be converted to Python object when reading data and again encoded
into field data when writing to database.

Currently supported types include: None, int, float, string (regular 0-terminated
string. Raw binary data is not allowed), record.

Setting a field to None is equivalent to clearing the field data. Similarly,
unwritten fields will be returned to Python as containing None.

FUNCTIONS
    get_field(db, rec, fieldnr)
        Get field data decoded to corresponding Python type.
    
    set_field(db, rec, fieldnr, data)
        Set field value. Field type is determined automatically.

db is an object returned by wgdb.attach_database(). rec is an object returned
by get_first_record() or other similar functions that return a record.

Examples:

>>> d=wgdb.attach_database()
...
>>> tmp=wgdb.create_record(d,4)
>>> tmp
<WGandalf db record at b6996e00>
>>> print (wgdb.get_field(d,tmp,0),)
(None,)
>>> wgdb.set_field(d,tmp,0,0)
>>> wgdb.set_field(d,tmp,1,256)
>>> wgdb.set_field(d,tmp,2,78.3345)
>>> wgdb.set_field(d,tmp,3,"hello")
>>> print (wgdb.get_field(d,tmp,0),)
(0,)
>>> print (wgdb.get_field(d,tmp,1),)
(256,)
>>> print (wgdb.get_field(d,tmp,2),)
(78.334500000000006,)
>>> print (wgdb.get_field(d,tmp,3),)
('hello',)
>>> wgdb.set_field(d,tmp,3,None)
>>> print (wgdb.get_field(d,tmp,3),)
(None,)

Example with a field pointing to another record:

>>> tmp=wgdb.create_record(d,4)
>>> n=wgdb.create_record(d,4)
>>> wgdb.set_field(d,tmp,3,n)
>>> wgdb.set_field(d,n,0,1)
>>> uu=wgdb.get_field(d,tmp,3)
>>> uu
<WGandalf db record at b69b3e18>
>>> wgdb.get_field(d,uu,0)
1
